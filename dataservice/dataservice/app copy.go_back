package main

import (
	"database/sql"
	"fmt"
	"html/template"
	"io/ioutil"
	"net/http"
	"regexp"

	_ "github.com/lib/pq"
)

type Page struct {
	Title string
	Body  []byte
}

/*

func (p *Page) save() error {
	filename := p.Title + ".txt"
	return ioutil.WriteFile(filename, p.Body, 0600)
}
*/

func loadPage(title string) (*Page, error) {
	filename := title + ".txt"
	body, err := ioutil.ReadFile(filename)
	if err != nil {
		return nil, err
	}
	return &Page{Title: title, Body: body}, nil
}

func coalmineHandler(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Hello!")
}

func errorHandler(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Error Page!")
}

/*
func coalmineJasonHandler(w http.ResponseWriter, r *http.Request, user User) {
	fmt.Fprintf(w, "Tweet! %s\n")
	b, err := json.Marshal(user)
	if err != nil {
		fmt.Println("error:", err) // should redirect error page
		//http.Redirect(w, r, "/error/"+title, http.StatusFound)
		return

	}
	//fmt.Fprintf(w, os.Stdout.Write(b), "")
	fmt.Fprintf(w, string(b), "")
}
*/

func viewHandler(w http.ResponseWriter, r *http.Request, title string) {
	p, err := loadPage(title)
	if err != nil {
		//http.Redirect(w, r, "/error/"+title, http.StatusFound)
		errorHandler(w, r)
		return
	}
	renderTemplate(w, "viewTemplate", p)
}

/*
func editHandler(w http.ResponseWriter, r *http.Request, title string) {
	p, err := loadPage(title)
	if err != nil {
		p = &Page{Title: title}
		//fmt.Fprintf(w, "Error Page!")
		//errorHandler(w, r)
		//return

	}
	renderTemplate(w, "editTemplate", p)
}
*/

/*
func saveHandler(w http.ResponseWriter, r *http.Request, title string) {
	body := r.FormValue("body")
	p := &Page{Title: title, Body: []byte(body)}
	err := p.save()
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	http.Redirect(w, r, "/view/"+title, http.StatusFound)
}
*/

var templates = template.Must(template.ParseFiles("editTemplate.html", "viewTemplate.html"))

func renderTemplate(w http.ResponseWriter, tmpl string, p *Page) {
	err := templates.ExecuteTemplate(w, tmpl+".html", p)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
	}
}

var validPath = regexp.MustCompile("^/(edit|view|error|coal-mine)/([a-zA-Z0-9]+)$")

func makeHandler(fn func(http.ResponseWriter, *http.Request, string)) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		m := validPath.FindStringSubmatch(r.URL.Path)
		if m == nil {
			http.NotFound(w, r)
			return
		}
		fn(w, r, m[2])
	}
}

/*
func main() {
	http.HandleFunc("/coal-mine/", coalmineHandler)
	http.HandleFunc("/error/", errorHandler)
	http.HandleFunc("/view/", makeHandler(viewHandler))
	http.HandleFunc("/edit/", makeHandler(editHandler))
	log.Fatal(http.ListenAndServe(":8080", nil))

}
*/

const (
	//host = "localhost"
	host     = "localhost"
	port     = 5432
	user     = "newuser"
	password = "password"
	dbname   = "payer"
)

func buildSql(payerName string) string {
	return fmt.Sprintf("SELECT * FROM payer WHERE payer_name ='%s';", payerName)
}

func main() {
	//connStr := "postgres://newuser:password@localhost:5432/payer?sslmode=disable"

	psqlInfo := fmt.Sprintf("host=%s port=%d user=%s "+
		"password=%s dbname=%s sslmode=disable",
		host, port, user, password, dbname)

	db, err := sql.Open("postgres", psqlInfo)

	payerInfo := buildSql("Anthem Empire BlueCross BlueShield")

	fmt.Println(payerInfo)

	if err != nil {
		panic(err)
	}
	defer db.Close()

	err = db.Ping()
	if err != nil {
		panic(err)
	}

	fmt.Println("Successfully connected!")
}
